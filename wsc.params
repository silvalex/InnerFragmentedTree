parent.0                                       = koza.params

seed.0                                         = 2
#composition-task                               = problem.xml
#composition-taxonomy                           = taxonomy.xml
#composition-services                           = services-output.xml
composition-task                               = test_problem.xml
composition-taxonomy                           = test_taxonomy.xml
composition-services                           = test_serv.xml
fitness-weight1                                = 0.2
fitness-weight2                                = 0.3
fitness-weight3                                = 0.2
fitness-weight4                                = 0.3

# We have one function set, of class GPFunctionSet
gp.fs.size                                     = 1
gp.fs.0                                        = ec.gp.GPFunctionSet

# We'll call the function set "f0".
gp.fs.0.name                                   = f0

# We have three functions in the function set.  They are:
gp.fs.0.size                                   = 3
gp.fs.0.func.0                                 = wsc.ServiceGPNode
gp.fs.0.func.0.nc                              = nc0
gp.fs.0.func.1                                 = wsc.SequenceGPNode
gp.fs.0.func.1.nc                              = nc2
gp.fs.0.func.2                                 = wsc.ParallelGPNode
gp.fs.0.func.2.nc                              = nc2

eval.problem                                   = wsc.WSC
init                                           = wsc.WSCInitializer
eval.problem.data                              = wsc.WSCData
stat                                           = wsc.WSCStatistics
stat.file		                               = $out.stat
stat.do-time                                   = true
stat.do-final                                  = true

generations                                    = 51

pop.subpops		                               = 1
pop.subpop.0.size 	                           = 500
pop.subpop.0.duplicate-retries 	               = 0
pop.subpop.0.species                           = wsc.WSCSpecies
pop.subpop.0.species.ind                       = wsc.WSCIndividual
pop.subpop.0.species.fitness                   = ec.simple.SimpleFitness

# Use simple fitness, and do not quit run early
pop.subpop.0.species.fitness.maximize          = true
quit-on-run-complete                           = false
checkpoint		                               = false

pop.subpop.0.species.pipe                      = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources          = 3
pop.subpop.0.species.pipe.source.0             = wsc.WSCCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob        = 0.8
pop.subpop.0.species.pipe.source.0.num-sources = 2
pop.subpop.0.species.pipe.source.1             = wsc.WSCMutationPipeline
pop.subpop.0.species.pipe.source.1.prob        = 0.1
pop.subpop.0.species.pipe.source.1.num-sources = 1
pop.subpop.0.species.pipe.source.2             = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.2.prob        = 0.1
pop.subpop.0.species.pipe.source.2.num-sources = 1
pop.subpop.0.species.pipe.source.0.source.0	   = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1	   = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1.source.0	   = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2.source.0	   = ec.select.TournamentSelection
breed.elite.0                                  = 0
select.tournament.size                         = 2